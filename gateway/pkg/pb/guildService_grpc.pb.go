// Copyright (c) 2023 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: guildService.proto

package guild

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GuildService_CreateOrUpdateGuildProgress_FullMethodName = "/accelbyte.custom.guild.GuildService/CreateOrUpdateGuildProgress"
	GuildService_GetGuildProgress_FullMethodName            = "/accelbyte.custom.guild.GuildService/GetGuildProgress"
)

// GuildServiceClient is the client API for GuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuildServiceClient interface {
	CreateOrUpdateGuildProgress(ctx context.Context, in *CreateOrUpdateGuildProgressRequest, opts ...grpc.CallOption) (*CreateOrUpdateGuildProgressResponse, error)
	GetGuildProgress(ctx context.Context, in *GetGuildProgressRequest, opts ...grpc.CallOption) (*GetGuildProgressResponse, error)
}

type guildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGuildServiceClient(cc grpc.ClientConnInterface) GuildServiceClient {
	return &guildServiceClient{cc}
}

func (c *guildServiceClient) CreateOrUpdateGuildProgress(ctx context.Context, in *CreateOrUpdateGuildProgressRequest, opts ...grpc.CallOption) (*CreateOrUpdateGuildProgressResponse, error) {
	out := new(CreateOrUpdateGuildProgressResponse)
	err := c.cc.Invoke(ctx, GuildService_CreateOrUpdateGuildProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guildServiceClient) GetGuildProgress(ctx context.Context, in *GetGuildProgressRequest, opts ...grpc.CallOption) (*GetGuildProgressResponse, error) {
	out := new(GetGuildProgressResponse)
	err := c.cc.Invoke(ctx, GuildService_GetGuildProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuildServiceServer is the server API for GuildService service.
// All implementations should embed UnimplementedGuildServiceServer
// for forward compatibility
type GuildServiceServer interface {
	CreateOrUpdateGuildProgress(context.Context, *CreateOrUpdateGuildProgressRequest) (*CreateOrUpdateGuildProgressResponse, error)
	GetGuildProgress(context.Context, *GetGuildProgressRequest) (*GetGuildProgressResponse, error)
}

// UnimplementedGuildServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGuildServiceServer struct {
}

func (UnimplementedGuildServiceServer) CreateOrUpdateGuildProgress(context.Context, *CreateOrUpdateGuildProgressRequest) (*CreateOrUpdateGuildProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateGuildProgress not implemented")
}
func (UnimplementedGuildServiceServer) GetGuildProgress(context.Context, *GetGuildProgressRequest) (*GetGuildProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildProgress not implemented")
}

// UnsafeGuildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuildServiceServer will
// result in compilation errors.
type UnsafeGuildServiceServer interface {
	mustEmbedUnimplementedGuildServiceServer()
}

func RegisterGuildServiceServer(s grpc.ServiceRegistrar, srv GuildServiceServer) {
	s.RegisterService(&GuildService_ServiceDesc, srv)
}

func _GuildService_CreateOrUpdateGuildProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGuildProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).CreateOrUpdateGuildProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_CreateOrUpdateGuildProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).CreateOrUpdateGuildProgress(ctx, req.(*CreateOrUpdateGuildProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuildService_GetGuildProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuildServiceServer).GetGuildProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GuildService_GetGuildProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuildServiceServer).GetGuildProgress(ctx, req.(*GetGuildProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuildService_ServiceDesc is the grpc.ServiceDesc for GuildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.custom.guild.GuildService",
	HandlerType: (*GuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateGuildProgress",
			Handler:    _GuildService_CreateOrUpdateGuildProgress_Handler,
		},
		{
			MethodName: "GetGuildProgress",
			Handler:    _GuildService_GetGuildProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guildService.proto",
}
