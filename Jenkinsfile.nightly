/* groovylint-disable DuplicateStringLiteral, Indentation, NestedBlockDepth */
library(
  identifier: 'jenkins-shared-library@master',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: 'https://github.com/dhanarab/jenkins-pipeline-library.git'
    ]
  )
)

bitbucketHttpsCredentials = 'bitbucket-build-extend-https'
bitbucketCredentialsSsh = 'bitbucket-build-extend-ssh'

bitbucketCommitHref = null

jobChannel = env.SLACK_CHANNEL_ACTIVITY_EXTEND_ENGINEERING ? env.SLACK_CHANNEL_ACTIVITY_EXTEND_ENGINEERING : "#activity-extend-engineering"

pipeline {
  agent {
    label "${params.AGENT_LABEL}"
  }
  stages {
    stage('Prepare') {
      steps {
        script {
          OS_NAME = sh(script: "uname -s", returnStdout: true).trim()
          currentBuild.displayName = "#${env.BUILD_NUMBER} ${OS_NAME}"
          gitRepositoryName = git.getRepositoryName()
          gitCommitHash = git.getCommitHash()
          bitbucketCommitHref = "https://api.bitbucket.org/2.0/repositories/accelbyte/${gitRepositoryName}/commit/${gitCommitHash}"
          bitbucket.setBuildStatus(
              bitbucketHttpsCredentials, bitbucketCommitHref, 'INPROGRESS', env.JOB_NAME.take(30),
              "${env.JOB_NAME}-${env.BUILD_NUMBER}", 'Jenkins', "${env.BUILD_URL}console")
        }
      }
    }
    stage('Test Sample') {
      options {
        lock("justice-extend-app-test")
      }
      stages {
        stage('Local Hosted') {
          steps {
            withCredentials([file(credentialsId: 'extend-sample-app-integration-test-env', variable: 'ENV_PATH')]) {
              sh 'cat $ENV_PATH > tmp.env'
              sh "{ set +x; } 2>/dev/null; echo '+ echo -e ****'; printf '\n${params.ENV_VAR_OVERRIDE}' >> tmp.env"
              sh 'make test_sample_local_hosted ENV_PATH=tmp.env'
            }
          }
        }
        stage('AccelByte Hosted') {
          steps {
            withCredentials([file(credentialsId: 'extend-sample-app-integration-test-env', variable: 'ENV_PATH')]) {
              sh 'cat $ENV_PATH > tmp.env'
              sh "{ set +x; } 2>/dev/null; echo '+ echo -e ****'; printf '\n${params.ENV_VAR_OVERRIDE}' >> tmp.env"
              sh 'make test_sample_accelbyte_hosted ENV_PATH=tmp.env'
            }
          }
        }
      }
    }
  }
  post {
    success {
      script {
        bitbucket.setBuildStatus(
            bitbucketHttpsCredentials, bitbucketCommitHref, 'SUCCESSFUL', env.JOB_NAME.take(30),
            "${env.JOB_NAME}-${env.BUILD_NUMBER}", 'Jenkins', "${env.BUILD_URL}console")
      }
    }
    failure {
      script {
        bitbucket.setBuildStatus(
            bitbucketHttpsCredentials, bitbucketCommitHref, 'FAILED', env.JOB_NAME.take(30),
            "${env.JOB_NAME}-${env.BUILD_NUMBER}", 'Jenkins', "${env.BUILD_URL}console")

        message = """
            :no_entry: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *failed*

            |""".stripMargin()
        slackSend(channel: jobChannel, color: '#FF0000', message: message)
      }
    }
  }
}
